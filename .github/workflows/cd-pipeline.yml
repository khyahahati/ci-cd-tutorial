name: CD Pipeline to Minikube (staging and production)
on:
  push:
    branches:
      - staging
      - main
  workflow_dispatch: {}
  release:
    types: published

env:
  PORT: 5001
  IMAGE: nodejs-app:${{github.sha}}
jobs:
  test:
    runs-on: ubuntu-latest
    name: Setup, test, and build project
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm ci

      - name: Test application
        run: npm test
        
  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    name: Build Docker image and deploy to Minikube
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Start Minikube
        uses: medyagh/setup-minikube@master
        with:
          minikube-version: 1.31.2
          kubernetes-version: 1.28.3

      - name: Configure Docker to use Minikube's Docker daemon
        run: |
          eval $(minikube docker-env)
          
      - name: Build Docker image in Minikube
        run: |
          eval $(minikube docker-env)
          docker build -t ${{env.IMAGE}} .
          
      - name: Update Kubernetes manifests with image tag
        run: |
          sed -i "s|image: .*|image: ${{env.IMAGE}}|g" k8s/deployment.yaml
          
      - name: Deploy to Minikube - Production environment (on main branch or release)
        if: github.ref == 'refs/heads/main' || (github.event_name == 'release' && github.event.action == 'published')
        run: |
          echo "Deploying to production environment"
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl set image deployment/nodejs-app nodejs-container=${{env.IMAGE}} --record
          kubectl rollout status deployment/nodejs-app
          kubectl get services
          
      - name: Deploy to Minikube - Staging environment
        if: github.ref == 'refs/heads/staging'
        run: |
          echo "Deploying to staging environment"
          # Create staging namespace if it doesn't exist
          kubectl create namespace staging --dry-run=client -o yaml | kubectl apply -f -
          # Apply manifests to staging namespace
          kubectl apply -f k8s/deployment.yaml -n staging
          kubectl apply -f k8s/service.yaml -n staging
          kubectl set image deployment/nodejs-app nodejs-container=${{env.IMAGE}} --record -n staging
          kubectl rollout status deployment/nodejs-app -n staging
          kubectl get services -n staging